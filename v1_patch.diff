From d3d7ff655064195f14222b3fb273548f20abe387 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Tha=CC=A3ch=20IT?= <thach.nguyen@dinosys.vn>
Date: Thu, 22 Jun 2017 21:33:51 +0700
Subject: [PATCH] - Fix bug sign up crash - Refactor handling error exception

---
 .../sportbook/exceptions/SignInException.kt        | 12 +++++++
 .../sportbook/exceptions/SignUpException.kt        | 21 +++++++++++
 .../sportbook/features/signin/SignInFragment.kt    | 15 ++++----
 .../sportbook/features/signin/SignInViewModel.kt   | 14 +++++---
 .../sportbook/features/signup/SignUpFragment.kt    | 41 +++++++++++++++-------
 .../sportbook/features/signup/SignUpViewModel.kt   | 33 +++++++++--------
 .../features/tournament/TournamentFragment.kt      |  8 ++---
 .../networks/authentication/AuthenticationAPI.kt   |  4 +--
 .../app/src/main/res/layout/fragment_sign_up.xml   |  8 +++--
 SportBook/app/src/main/res/values/strings.xml      |  2 ++
 10 files changed, 108 insertions(+), 50 deletions(-)
 create mode 100644 SportBook/app/src/main/java/com/dinosys/sportbook/exceptions/SignInException.kt
 create mode 100644 SportBook/app/src/main/java/com/dinosys/sportbook/exceptions/SignUpException.kt

diff --git a/SportBook/app/src/main/java/com/dinosys/sportbook/exceptions/SignInException.kt b/SportBook/app/src/main/java/com/dinosys/sportbook/exceptions/SignInException.kt
new file mode 100644
index 0000000..29d19fa
--- /dev/null
+++ b/SportBook/app/src/main/java/com/dinosys/sportbook/exceptions/SignInException.kt
@@ -0,0 +1,12 @@
+package com.dinosys.sportbook.exceptions
+
+
+class SignInEmailNullOrEmptyException(message: String?): Exception(message)
+
+class SignInEmailInvalidException(message: String?): Exception(message)
+
+class SignInPasswordNullOrEmptyException(message: String?): Exception(message)
+
+class SignInPasswordInvalidException(message: String?): Exception(message)
+
+class SignInWithFailureException(message: String?): Exception(message)
diff --git a/SportBook/app/src/main/java/com/dinosys/sportbook/exceptions/SignUpException.kt b/SportBook/app/src/main/java/com/dinosys/sportbook/exceptions/SignUpException.kt
new file mode 100644
index 0000000..ee43383
--- /dev/null
+++ b/SportBook/app/src/main/java/com/dinosys/sportbook/exceptions/SignUpException.kt
@@ -0,0 +1,21 @@
+package com.dinosys.sportbook.exceptions
+
+
+
+class SignUpNameNullOrEmptyException(message: String?): Exception(message)
+
+class SignUpEmailNullOrEmptyException(message: String?): Exception(message)
+
+class SignUpEmailInvalidException(message: String?): Exception(message)
+
+class SignUpPasswordNullOrEmptyException(message: String?): Exception(message)
+
+class SignUpPasswordNotMatchException(message: String?): Exception(message)
+
+class SignUpPasswordInvalidException(message: String?): Exception(message)
+
+class SignUpPasswordConfirmInvalidException(message: String?): Exception(message)
+
+class SignUpPasswordConfirmINullOrEmptyException(message: String?): Exception(message)
+
+class SignUpWithFailureException(message: String?): Exception(message)
diff --git a/SportBook/app/src/main/java/com/dinosys/sportbook/features/signin/SignInFragment.kt b/SportBook/app/src/main/java/com/dinosys/sportbook/features/signin/SignInFragment.kt
index e071c88..3dca047 100644
--- a/SportBook/app/src/main/java/com/dinosys/sportbook/features/signin/SignInFragment.kt
+++ b/SportBook/app/src/main/java/com/dinosys/sportbook/features/signin/SignInFragment.kt
@@ -6,6 +6,7 @@ import com.dinosys.sportbook.MainActivity
 import com.dinosys.sportbook.R
 import com.dinosys.sportbook.application.SportbookApp
 import com.dinosys.sportbook.configs.PLATFORM_ANDROID_VALUE
+import com.dinosys.sportbook.exceptions.SignInWithFailureException
 import com.dinosys.sportbook.extensions.addDisposableTo
 import com.dinosys.sportbook.extensions.appContext
 import com.dinosys.sportbook.extensions.openScreenByTag
@@ -59,7 +60,7 @@ class SignInFragment : BaseFragment() {
                             .subscribeOn(Schedulers.newThread())
                             .observeOn(AndroidSchedulers.mainThread())
                             .onErrorResumeNext {
-                                t: Throwable? -> onSignInErrorResponse(t?.message)
+                                t: Throwable? -> onSignInErrorResponse(t)
                             }
                 }
                 .observeOn(AndroidSchedulers.mainThread())
@@ -70,8 +71,8 @@ class SignInFragment : BaseFragment() {
         btnCreateAnAccount.setOnClickListener { fragmentManager.openScreenByTag(SignUpFragment.TAG) }
     }
 
-    fun onSignInErrorResponse(textError : String?) : ObservableSource<Response<AuthModel>>? {
-        ToastUtil.show(appContext, textError)
+    fun onSignInErrorResponse(t: Throwable?) : ObservableSource<Response<AuthModel>>? {
+        ToastUtil.show(appContext, "${t?.message}")
         return Observable.empty()
     }
 
@@ -89,7 +90,7 @@ class SignInFragment : BaseFragment() {
                     loadTournamentPage()
                 }
             }
-            else -> onSignInErrorResponse(getString(R.string.error_login_failure_text))
+            else -> onSignInErrorResponse(SignInWithFailureException(getString(R.string.error_login_failure_text)))
         }
     }
 
@@ -114,7 +115,8 @@ class SignInFragment : BaseFragment() {
         btnFacebookLogin!!.setReadPermissions("email")
         btnFacebookLogin!!.fragment = this
         mCallbackManager = CallbackManager.Factory.create()
-        val disposable = Observable.create<LoginResult> { e ->
+
+        Observable.create<LoginResult> { e ->
             btnFacebookLogin!!.registerCallback(mCallbackManager,
                     object : FacebookCallback<LoginResult> {
                         override fun onCancel() = e.onComplete()
@@ -130,7 +132,8 @@ class SignInFragment : BaseFragment() {
                 }
                 .observeOn(AndroidSchedulers.mainThread())
                 .subscribe({ e -> LogUtil.d(TAG, e.toString()) })
-        addDisposable(disposable)
+                .addDisposableTo(this)
+
     }
 
     override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
diff --git a/SportBook/app/src/main/java/com/dinosys/sportbook/features/signin/SignInViewModel.kt b/SportBook/app/src/main/java/com/dinosys/sportbook/features/signin/SignInViewModel.kt
index 31b6968..c416ff1 100644
--- a/SportBook/app/src/main/java/com/dinosys/sportbook/features/signin/SignInViewModel.kt
+++ b/SportBook/app/src/main/java/com/dinosys/sportbook/features/signin/SignInViewModel.kt
@@ -4,6 +4,10 @@ import android.content.Context
 import com.dinosys.sportbook.R
 import com.dinosys.sportbook.configs.PASSWORD_MAX_LENGHT_REQUIRED
 import com.dinosys.sportbook.configs.REDIRECT_URL_FORGOT_PASSWORD
+import com.dinosys.sportbook.exceptions.SignInEmailInvalidException
+import com.dinosys.sportbook.exceptions.SignInEmailNullOrEmptyException
+import com.dinosys.sportbook.exceptions.SignInPasswordInvalidException
+import com.dinosys.sportbook.exceptions.SignInPasswordNullOrEmptyException
 import com.dinosys.sportbook.extensions.isInvalidEmail
 import com.dinosys.sportbook.extensions.isInvalidPassword
 import com.dinosys.sportbook.extensions.throwable
@@ -18,17 +22,17 @@ class SignInViewModel @Inject constructor(val authApi : AuthenticationAPI) {
 
      fun signIn(context: Context?, userName:String?, password:String?) : Observable<Response<AuthModel>> {
         if (userName.isNullOrEmpty()) {
-            return Observable.error(context?.getString(R.string.error_email_required_text)?.throwable)
+            return Observable.error(SignInEmailNullOrEmptyException(context?.getString(R.string.error_email_required_text)))
         }
         if (password.isNullOrEmpty()) {
-            return Observable.error(context?.getString(R.string.error_password_required_text)?.throwable)
+            return Observable.error(SignInPasswordNullOrEmptyException(context?.getString(R.string.error_password_required_text)))
         }
         if (userName!!.isInvalidEmail) {
-            return Observable.error(context?.getString(R.string.error_username_invalid_text)?.throwable)
+            return Observable.error(SignInEmailInvalidException(context?.getString(R.string.error_username_invalid_text)))
         }
         if (password!!.isInvalidPassword) {
-            return Observable.error(context?.getString(R.string.error_password_invalid_text,
-                                        PASSWORD_MAX_LENGHT_REQUIRED)?.throwable)
+            return Observable.error(SignInPasswordInvalidException(context?.getString(R.string.error_password_invalid_text,
+                    PASSWORD_MAX_LENGHT_REQUIRED)))
         }
         return authApi.signIn(userName, password)
     }
diff --git a/SportBook/app/src/main/java/com/dinosys/sportbook/features/signup/SignUpFragment.kt b/SportBook/app/src/main/java/com/dinosys/sportbook/features/signup/SignUpFragment.kt
index 341f69c..2fe8fb4 100644
--- a/SportBook/app/src/main/java/com/dinosys/sportbook/features/signup/SignUpFragment.kt
+++ b/SportBook/app/src/main/java/com/dinosys/sportbook/features/signup/SignUpFragment.kt
@@ -3,8 +3,12 @@ package com.dinosys.sportbook.features.signup
 import android.content.Intent
 import com.dinosys.sportbook.R
 import com.dinosys.sportbook.application.SportbookApp
+import com.dinosys.sportbook.exceptions.SignUpWithFailureException
+import com.dinosys.sportbook.extensions.addDisposableTo
 import com.dinosys.sportbook.extensions.appContext
+import com.dinosys.sportbook.extensions.openScreenByTag
 import com.dinosys.sportbook.features.BaseFragment
+import com.dinosys.sportbook.features.signin.SignInFragment
 import com.dinosys.sportbook.networks.models.AuthModel
 import com.dinosys.sportbook.utils.LogUtil
 import com.dinosys.sportbook.utils.ToastUtil
@@ -18,13 +22,10 @@ import io.reactivex.ObservableSource
 import io.reactivex.android.schedulers.AndroidSchedulers
 import io.reactivex.schedulers.Schedulers
 import kotlinx.android.synthetic.main.fragment_sign_up.*
+import org.json.JSONObject
 import retrofit2.Response
 import javax.inject.Inject
 
-/**
- * Created by hanth on 31/05/2017.
- */
-
 class SignUpFragment : BaseFragment() {
 
     override fun inflateFromLayout() = R.layout.fragment_sign_up
@@ -48,21 +49,21 @@ class SignUpFragment : BaseFragment() {
                     val name = etName.text.toString()
                     val email = etEmail.text.toString()
                     val password = etPassword.text.toString()
-                    val confirmpassword = etConfirmPassword.text.toString()
-                    signUpApi.signUp(context,name,email,password,confirmpassword)
+                    val confirmPassword = etConfirmPassword.text.toString()
+                    signUpApi.signUp(context, name, email, password, confirmPassword)
                             .subscribeOn(Schedulers.newThread())
                             .observeOn(AndroidSchedulers.mainThread())
                             .onErrorResumeNext {
-                                t:Throwable? -> onSignUpErrorResponse(t?.message)
+                                t:Throwable? -> onSignUpErrorResponse(t)
                             }
                 }
                 .observeOn(AndroidSchedulers.mainThread())
                 .subscribe({response -> onSignUpDataResponse(response = response)})
-        addDisposable(btnSignUpDisposable)
+                .addDisposableTo(this)
     }
 
-    private fun onSignUpErrorResponse(textError : String?) : ObservableSource<Response<AuthModel>>? {
-        ToastUtil.show(appContext, textError)
+    private fun onSignUpErrorResponse(t : Throwable?) : ObservableSource<Response<AuthModel>>? {
+        ToastUtil.show(appContext, t?.message)
         return Observable.empty()
     }
 
@@ -70,10 +71,24 @@ class SignUpFragment : BaseFragment() {
         val statusCode = response.code()
         when (statusCode) {
             in 200..300 -> {
-                val signIn = response.body()
-                signIn?.header = response.headers()
+                ToastUtil.show(appContext!!, getString(R.string.check_confirm_email_text))
+                fragmentManager.openScreenByTag(SignInFragment.TAG)
+            }
+            422 -> {
+                val responseText = response.errorBody()?.string()
+                var errorMessage:String? = JSONObject(responseText)
+                        ?.getJSONObject("errors")
+                        ?.getJSONArray("full_messages")?.getString(0)
+
+                if (errorMessage.isNullOrEmpty()) {
+                   errorMessage = getString(R.string.sign_up_with_the_failure)
+                }
+                onSignUpErrorResponse(SignUpWithFailureException(errorMessage))
+            }
+            else -> {
+                val errorMessage = getString(R.string.sign_up_with_the_failure)
+                onSignUpErrorResponse(SignUpWithFailureException(errorMessage))
             }
-            else -> onSignUpErrorResponse(getString(R.string.error_login_failure_text))
         }
     }
 
diff --git a/SportBook/app/src/main/java/com/dinosys/sportbook/features/signup/SignUpViewModel.kt b/SportBook/app/src/main/java/com/dinosys/sportbook/features/signup/SignUpViewModel.kt
index 3312f55..aaddf0a 100644
--- a/SportBook/app/src/main/java/com/dinosys/sportbook/features/signup/SignUpViewModel.kt
+++ b/SportBook/app/src/main/java/com/dinosys/sportbook/features/signup/SignUpViewModel.kt
@@ -3,6 +3,7 @@ package com.dinosys.sportbook.features.signup
 import android.content.Context
 import com.dinosys.sportbook.R
 import com.dinosys.sportbook.configs.PASSWORD_MAX_LENGHT_REQUIRED
+import com.dinosys.sportbook.exceptions.*
 import com.dinosys.sportbook.extensions.isInvalidEmail
 import com.dinosys.sportbook.extensions.isInvalidPassword
 import com.dinosys.sportbook.extensions.throwable
@@ -13,36 +14,34 @@ import retrofit2.Response
 import javax.inject.Inject
 import javax.inject.Singleton
 
-/**
- * Created by hanth on 31/05/2017.
- */
-@Singleton
+
 class SignUpViewModel @Inject constructor(val authApi: AuthenticationAPI) {
 
-    fun signUp(context: Context?, name: String?, email: String?, password: String?, confirmpassword: String?): Observable<Response<AuthModel>> {
+    fun signUp(context: Context?, name: String?, email: String?, password: String?, confirmPassword: String?): Observable<Response<AuthModel>> {
         if (name.isNullOrEmpty()) {
-            return Observable.error(context?.getString(R.string.error_name_required_text)?.throwable)
+            return Observable.error(SignUpNameNullOrEmptyException(context?.getString(R.string.error_name_required_text)))
         }
         if (email.isNullOrEmpty()) {
-            return Observable.error(context?.getString(R.string.error_username_required_text)?.throwable)
+            return Observable.error(SignUpEmailNullOrEmptyException(context?.getString(R.string.error_username_required_text)))
         }
         if (password.isNullOrEmpty()) {
-            return Observable.error(context?.getString(R.string.error_password_required_text)?.throwable)
+            return Observable.error(SignUpPasswordNullOrEmptyException(context?.getString(R.string.error_password_required_text)))
         }
         if (email!!.isInvalidEmail) {
-            return Observable.error(context?.getString(R.string.error_username_invalid_text)?.throwable)
+            return Observable.error(SignUpEmailInvalidException(context?.getString(R.string.error_username_invalid_text)))
         }
         if (password!!.isInvalidPassword) {
-            return Observable.error(context?.getString(R.string.error_password_invalid_text,
-                    PASSWORD_MAX_LENGHT_REQUIRED)?.throwable)
+            return Observable.error(SignUpPasswordInvalidException(context?.getString(R.string.error_password_invalid_text, PASSWORD_MAX_LENGHT_REQUIRED)))
+        }
+        if (confirmPassword!!.isNullOrEmpty()) {
+            return Observable.error(SignUpPasswordConfirmInvalidException(context?.getString(R.string.error_password_required_text)))
         }
-        if (confirmpassword!!.isInvalidPassword) {
-            return Observable.error(context?.getString(R.string.error_password_invalid_text,
-                    PASSWORD_MAX_LENGHT_REQUIRED)?.throwable)
+        if (confirmPassword!!.isInvalidPassword) {
+            return Observable.error(SignUpPasswordConfirmInvalidException(context?.getString(R.string.error_password_invalid_text, PASSWORD_MAX_LENGHT_REQUIRED)))
         }
-        if(!password.equals(confirmpassword)){
-            return Observable.error(context?.getString(R.string.error_password_mismatch_text)?.throwable)
+        if(!password.equals(confirmPassword)){
+            return Observable.error(SignUpPasswordNotMatchException(context?.getString(R.string.error_password_mismatch_text)))
         }
-        return authApi.signUp(email, password)
+        return authApi.signUp(email, password, confirmPassword)
     }
 }
\ No newline at end of file
diff --git a/SportBook/app/src/main/java/com/dinosys/sportbook/features/tournament/TournamentFragment.kt b/SportBook/app/src/main/java/com/dinosys/sportbook/features/tournament/TournamentFragment.kt
index 3a6765b..21a3b45 100644
--- a/SportBook/app/src/main/java/com/dinosys/sportbook/features/tournament/TournamentFragment.kt
+++ b/SportBook/app/src/main/java/com/dinosys/sportbook/features/tournament/TournamentFragment.kt
@@ -3,7 +3,6 @@ package com.dinosys.sportbook.features.tournament
 
 import android.os.Bundle
 import android.support.v7.widget.LinearLayoutManager
-import android.util.Log
 import com.dinosys.sportbook.R
 import com.dinosys.sportbook.application.SportbookApp
 import com.dinosys.sportbook.components.ItemSpaceDecorator
@@ -13,6 +12,7 @@ import com.dinosys.sportbook.features.mytournament.MyTournamentFragment
 import com.dinosys.sportbook.features.tournament.overview.TournamentOverviewFragment
 import com.dinosys.sportbook.networks.models.TournamentDataModel
 import com.dinosys.sportbook.networks.models.TournamentModel
+import com.dinosys.sportbook.utils.LogUtil
 import com.facebook.FacebookSdk.getApplicationContext
 import io.reactivex.android.schedulers.AndroidSchedulers
 import io.reactivex.schedulers.Schedulers
@@ -52,11 +52,11 @@ class TournamentFragment : BaseFragment(), OnTournamentListener {
                                             val tournament = e.body()
                                             fillDataToAdapter(tournament)
                                         }
-                                        else -> Log.e(TAG, e.message())
+                                        else -> LogUtil.e(TAG, e.message())
                                     }
 
                                 },
-                                { t -> Log.e(TAG, "Error: ${t.message}") })
+                                { t -> LogUtil.e(TAG, "Error: ${t.message}") })
         )
     }
 
@@ -66,7 +66,7 @@ class TournamentFragment : BaseFragment(), OnTournamentListener {
         tournamentData?.add(0, myTournament)
         when (tournamentData) {
             null -> {
-                Log.e(TAG, "Tournament data response is null!")
+                LogUtil.e(TAG, "Tournament data response is null!")
             }
             else -> rvTournament.adapter = TournamentAdapter(tournamentData, WeakReference(this))
         }
diff --git a/SportBook/app/src/main/java/com/dinosys/sportbook/networks/authentication/AuthenticationAPI.kt b/SportBook/app/src/main/java/com/dinosys/sportbook/networks/authentication/AuthenticationAPI.kt
index f7f8abe..2fe5562 100644
--- a/SportBook/app/src/main/java/com/dinosys/sportbook/networks/authentication/AuthenticationAPI.kt
+++ b/SportBook/app/src/main/java/com/dinosys/sportbook/networks/authentication/AuthenticationAPI.kt
@@ -30,9 +30,9 @@ interface AuthenticationAPI {
     fun forgotPassword(@Field("email") email : String,
                        @Field("redirect_url") redirectUrl : String) : Observable<Response<JSONObject>>
 
-
+    @FormUrlEncoded
     @POST("auth/")
-    fun signUp(@Field("email")email:String, @Field("password") password:String): Observable<Response<AuthModel>>
+    fun signUp(@Field("email")email:String, @Field("password") password:String, @Field("password_confirmation") passwordConfirmation: String): Observable<Response<AuthModel>>
 
     @FormUrlEncoded
     @POST("/v1/invitations/create")
diff --git a/SportBook/app/src/main/res/layout/fragment_sign_up.xml b/SportBook/app/src/main/res/layout/fragment_sign_up.xml
index b942bf1..3cf552e 100644
--- a/SportBook/app/src/main/res/layout/fragment_sign_up.xml
+++ b/SportBook/app/src/main/res/layout/fragment_sign_up.xml
@@ -1,7 +1,9 @@
-<android.support.v4.widget.NestedScrollView xmlns:android="http://schemas.android.com/apk/res/android"
+<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
-    android:layout_height="wrap_content">
+    android:layout_height="match_parent"
+    android:scrollbars="vertical"
+    android:background="@android:color/white">
 
     <LinearLayout
         android:layout_width="match_parent"
@@ -96,4 +98,4 @@
             android:layout_marginRight="16dp" />
 
     </LinearLayout>
-</android.support.v4.widget.NestedScrollView>
+</ScrollView>
diff --git a/SportBook/app/src/main/res/values/strings.xml b/SportBook/app/src/main/res/values/strings.xml
index 0a4ebb5..8e73b0e 100644
--- a/SportBook/app/src/main/res/values/strings.xml
+++ b/SportBook/app/src/main/res/values/strings.xml
@@ -48,4 +48,6 @@
     <string name="district_text">District *</string>
     <string name="title_select_the_city">Select the city</string>
     <string name="title_select_your_district">Select your district</string>
+    <string name="check_confirm_email_text">We have sent you a confirmation email, please check your email</string>
+    <string name="sign_up_with_the_failure">Sign up with the failure</string>
 </resources>
-- 
2.10.1

